<?php
/**
 * Functions for creating and managing taxonomy images
 *
 * Uses Genesis term meta functionality to store the image ID
 * in the Genesis term meta array.
 *
 * @since 0.8.0
 *
 * @package genesis-taxonomy-images
 * @version 0.8.1
 * @author Ade Walker
 */

if ( ! defined( 'ABSPATH' ) ) {
	exit( _( 'Sorry, you are not allowed to access this page directly.' ) );
}


add_action( 'init', 'gtaxi_add_taxonomy_image_hooks', 999 );
/**
 * gtaxi_add_taxonomy_image_hooks() loops through all registered taxonomies that have a public UI
 * and adds necessary filters and actions to display and edit images in the taxonomies' terms admin screens.
 *
 * Hooked via the 'init' action with very low priority to ensure that any custom taxonomies have been
 * registered and are available to us.
 *
 *
 * Added gtaxi_taxonomies filter, props wpsmith
 *
 * @since 0.8.0
 *
 * @see gtaxi_get_taxonomies()
 * @link none
 * @global none.
 *
 * @return void.
 */
function gtaxi_add_taxonomy_image_hooks() {
	add_action( 'admin_enqueue_scripts', 'gtaxi_enqueue_media' );

	/**
	 * gtaxi_taxonomies to filter the list of applicable taxonomies.
	 * props wpsmith
	 *
	 * By default, all public taxonomies that have a public UI are returned
	 *
	 * @since 0.8.1
	 *
	 * @param array array Results from gtaxi_get_taxonomies()
	 */
	$taxonomies = apply_filters( 'gtaxi_taxonomies', gtaxi_get_taxonomies() );
	
	foreach ( $taxonomies as $tax_name ) {
		// See wp-admin/includes/class-wp-links-list-table.php for these two
		add_filter( 'manage_edit-'.$tax_name.'_columns', 'gtaxi_add_taxonomy_image_column' );
		add_filter( 'manage_'.$tax_name.'_custom_column', 'gtaxi_add_taxonomy_image_column_content', 10, 3 );

		// Priority of 9 to insert this before Genesis term meta fields. See wp-admin/edit-tag-form.php
		add_action( $tax_name.'_edit_form', 'gtaxi_add_edit_term_fields', 9, 2 );
	}
}


/**
 * gtaxi_get_taxonomies() gets the list of supported taxonomies.
 * Props wpsmith
 * 
 * @since 0.8.1
 *
 * @see none
 * @link none
 * @global none.
 *
 * @return array Array of supported taxonomies.
 */
function gtaxi_get_taxonomies() {

	/**
	 * gtaxi_get_taxonomies to filter the list of applicable taxonomies.
	 *
	 * By default, all public taxonomies that have a public UI are returned
	 *
	 * @since 0.8.1
	 *
	 * @param array array Results from get_taxonomies( array( 'show_ui' => true ) )
	 */
	return apply_filters( 'gtaxi_get_taxonomies', get_taxonomies( array( 'show_ui' => true ) ) );
}


/**
 * gtaxi_enqueue_media() enqueues the built-in WP media functionality if we're viewing a term edit
 * screen and the current taxonomy is in the array of taxonomies generated by gtaxi_get_taxonomies()
 *
 * Hooked via 'admin_enqueue_scripts'
 *
 * @since 0.8.0
 *
 * @see gtaxi_add_taxonomy_image_hooks()
 * @see gtaxi_get_taxonomies()
 * @link none
 * @global none.
 *
 * @return void.
 */
function gtaxi_enqueue_media() {
    $screen = get_current_screen();
    
    if ( in_array( $screen->taxonomy, gtaxi_get_taxonomies() ) ) {
	    wp_enqueue_media();
    }
}


/**
 * Display the selected term image and controls in the taxonomy term edit screen.
 *
 * Hooked via {$tax_name}_edit_form filter
 *
 * Note that the Image attachment ID gets saved in the Genesis Term meta
 * array automatically without this plugin having to deal with Saving data.
 *
 * @since 0.8.0
 *
 * @see gtaxi_add_taxonomy_image_hooks()
 * @link none
 * @global none.
 *
 * @param object $term Term being edited
 * @param string $taxonomy Taxonomy of the term being edited
 * @return void
 */
function gtaxi_add_edit_term_fields( $term, $taxonomy ) {
	$term_image_url = '';
	$default_image_width = 200;
	$default_image_height = 200;
	$term_image_width = $default_image_width . 'px';
	$term_image_height = $default_image_height . 'px';

	$term_image_id 	= isset ( $term->meta['term_thumbnail_id'] ) ? absint( $term->meta['term_thumbnail_id'] ) : false;

	if ($term_image_id) {
		//$term_image_url = wp_get_attachment_url( $term_image_id );
		list( $term_image_url, $term_image_width, $term_image_height ) = wp_get_attachment_image_src( $term_image_id, 'medium', false );
	}

	if ( ! $term_image_url ) {
		$term_image_url = gtaxi_get_placeholder_img_src();
		$term_image_id = '0';
	}

	?>
	<table class="form-table">
		<tbody>
			<tr class="form-field">
				<th scope="row" valign="top"><label><?php _e( 'Term Image', 'gftw' ); ?></label></th>
				<td>
					<div id="term_thumbnail" style="float:left;margin-right:10px;">
						<img src="<?php echo $term_image_url; ?>" width="<?php echo $term_image_width; ?>" height="<?php echo $term_image_height; ?>" />
					</div>
					<div style="line-height:60px;">
						<input type="hidden" id="genesis-meta[term_thumbnail_id]" name="genesis-meta[term_thumbnail_id]" value="<?php echo $term_image_id; ?>" />
						<button type="submit" id="upload_image_button" class="button"><?php _e( 'Set term image', 'gftw' ); ?></button>
						<button type="submit" id="remove_image_button" class="button"><?php _e( 'Remove term image', 'gftw' ); ?></button>
					</div>
					<script type="text/javascript">

						// Only show the "remove image" button when needed
			 			if ( '0' == jQuery('#genesis-meta\\[term_thumbnail_id\\]').val() )
							jQuery('#remove_image_button').hide();
				
						// Uploading files
						var file_frame;

						// When the Set button is clicked
						jQuery(document).on( 'click', '#upload_image_button', function( event ){
							event.preventDefault();

							// If the media frame already exists, reopen it.
							if ( file_frame ) {
								file_frame.open();
								return;
							}

							// Create the media frame.
							file_frame = wp.media.frames.downloadable_file = wp.media({
								title: '<?php _e( 'Set term image', 'gftw' ); ?>',
								button: {
									text: '<?php _e( 'Set term image', 'gftw' ); ?>'
								},
								multiple: false
							});

							// When an image is selected
							file_frame.on( 'select', function() {
								var attachment = file_frame.state().get('selection').first().toJSON();
								var medium = attachment['sizes']['medium'];
								console.log(attachment);
								jQuery('#genesis-meta\\[term_thumbnail_id\\]').val( attachment.id );
								jQuery('#term_thumbnail img').attr('src', medium.url ).height(medium.height).width(medium.width);
								jQuery('#remove_image_button').show();
							});

							// Finally, open the modal.
							file_frame.open();
						});

						// When the Remove button is clicked
						jQuery(document).on( 'click', '#remove_image_button', function( event ){
							jQuery('#term_thumbnail img').attr('src', '<?php echo gtaxi_get_placeholder_img_src(); ?>').height(<?php echo $default_image_height; ?>).width(<?php echo $default_image_width; ?>);
							jQuery('#genesis-meta\\[term_thumbnail_id\\]').val('0');
							jQuery('#remove_image_button').hide();
							return false;
						});

					</script>
					<div class="clear"></div>
				</td>
			</tr>
		</tbody>
	</table>
	<?php
}


/**
 * gtaxi_add_taxonomy_image_column() adds a new 'Image' column to the taxonomy admin screen to the right of the
 * checkbox column.
 *
 * Hooked to 'manage_edit-{$tax_name}_columns' filter.
 *
 * @since 0.8.0
 *
 * @see gtaxi_add_taxonomy_image_hooks()
 * @link none
 * @global none.
 *
 * @param  array $columns Default columns displayed in tax terms screen.
 * @return array Default plus new columns to be displayed in tax terms screen.
 */
function gtaxi_add_taxonomy_image_column( $columns ) {
	$new_columns = array();

	// 'cb' is the checkbox column, the one furthest to the left
	$new_columns['cb'] = $columns['cb'];

	// This is the one we're adding, along with its title
	$new_columns['thumb'] = __( 'Image', 'gftw' );

	// Now merge the two arrays, effectively inserting our new one after the cb column.
	unset( $columns['cb'] );
	return array_merge( $new_columns, $columns );
}


/**
 * gtaxi_add_taxonomy_image_column_content() populates the new 'Image' column in the taxonomy admin screen. If no
 * image is set, a default image is displayed
 *
 * Hooked to 'manage_{$tax_name}_custom_column' filter.
 *
 * @since 0.8.0
 *
 * @see gtaxi_add_taxonomy_image_hooks()
 * @link none
 * @global none.
 *
 * @param string $columns
 * @param string $column
 * @param int $id Term ID
 * @return string $columns Content for our new column
 */
function gtaxi_add_taxonomy_image_column_content( $columns, $column, $id ) {

	if ( $column == 'thumb' ) {
		$image = '';
		
		// Get the taxonomy name...
		$taxonomy = isset( $_GET['taxonomy' ] ) ? $_GET['taxonomy' ] : false;
		if ( ! $taxonomy )
			return $columns;

		// ...then get the term object.
		$term = get_term_by( 'id', $id, $taxonomy );
		if ( ! $term )
			return $columns;

		// Now get the stored taxonomy image id if present.
		$thumbnail_id = isset( $term->meta['term_thumbnail_id'] ) ? absint( $term->meta['term_thumbnail_id'] ) : false;

		// If we have an ID, go get the image URL.
		if ( $thumbnail_id ) {
			$image = wp_get_attachment_image_src( $thumbnail_id, 'thumbnail' )[0];
		}

		// If we don't have a valid image url, then either a) an image was not set or b) the stored ID is invalid.
		// Either way, show the default image.
		// @TODO: Should we also reset the stored value here if b) is the case?
		if ( ! $image ) {
			$image = gtaxi_get_placeholder_img_src();
		}

		$alt = esc_attr( $term->name ) . ' Term image';
		
		$columns .= '<img src="' . $image . '" alt="' . $alt . '" class="wp-post-image" height="48" width="48" />';
	}

	return $columns;
}


/**
 * gtaxi_get_placeholder_img_src() gets the URL of the placeholder taxonomy term image.
 *
 * Includes a filter to allow users to override location of placeholder image.
 *
 * @since 0.8.0
 *
 * @see none
 * @link none
 * @global none.
 *
 * @return string URL of placeholder image.
 */
function gtaxi_get_placeholder_img_src() {

	/**
	 * gtaxi_get_placeholder_img_src to filter the placeholder image.
	 *
	 * By default, uses a provided image
	 *
	 * @since 0.8.0
	 *
	 * @param string void URL to default image
	 */
	return apply_filters('gtaxi_get_placeholder_img_src', plugins_url( 'assets/images/placeholder.png', dirname(__FILE__) ) );
}


/**
 * gtaxi_get_taxonomy_image() gets the saved taxonomy image for a term, or a default image if a saved term is not set.
 *
 * Based heavily on Genesis genesis_get_image().
 *
 * @TODO: allow $args['fallback'] to accept a full url to a placeholder image OR a specific image ID
 * @TODO: allow $args['format'] to return an image object if 'object' is supplied
 *
 * @since 0.8.0
 *
 * @see Genesis lib/functions/image.php genesis_get_image()
 * @link none
 * @global object $wp_query.
 *
 * @param array $args
 * @return mixed HTML or src of this Term's image, or placeholder, or false
 */
function gtaxi_get_taxonomy_image( $args = array() ) {
	global $wp_query;
	$term = '';
	$output = '';

	// Set the default options
	$defaults = array(
		'format'   => 'html',           // 'html' creates a full HTML markup; 'url' gets just the image url;
		'size'     => 'full',           // any built-in or user-defined media size
		'num'      => 0,                // not used; will be removed in the future
		'attr'     => '',               // attributes applied to the requested image html. For details see
										//    https://codex.wordpress.org/Function_Reference/wp_get_attachment_image
		'fallback' => 'placeholder',    // 'placeholder' uses the built-in default image; if an image is not assigned
										//    to the term and this is anything other than 'placeholder' then
										//    gtaxi_get_taxonomy_image() will return false
		'context'  => '',               // not used; will be removed in the future
		'term'     => '',               // term object if you're after the image for a specific term. Since 1.0.0
	);

	/**
	 * Filter the default options
	 *
	 * @since 0.8.0
	 *
	 * @param array $defaults The default options.
	 */
	$defaults = apply_filters( 'gtaxi_get_taxonomy_image_default_args', $defaults );

	// Merge the args sent to the function with the defaults
	$args = wp_parse_args( $args, $defaults );

	// If we were sent a term object, use that
	if ( $args['term'] && is_object( $args['term'] ) ) {
		$term = $args['term'];
	}

	// If not, get the term object based on what we were sent instead
	if ( ! $term ) {
		if ( ! is_category() && ! is_tag() && ! is_tax() ) { return false; }
		$term = is_tax() ? get_term_by( 'slug', get_query_var( 'term' ), get_query_var( 'taxonomy' ) ) : $wp_query->get_queried_object();
	}

	// And if we *still* don't have a term object, bail.
	if ( ! $term ) { return false; }

	$term_image_id = isset( $term->meta['term_thumbnail_id'] ) ? $term->meta['term_thumbnail_id'] : false;
	
	if ( $term_image_id ) {
		// @TODO: error checking here
		$html = wp_get_attachment_image( $term_image_id, $args['size'], false, $args['attr'] );

		// This sets up $url to be the first item of the returned array,
		list( $url ) = wp_get_attachment_image_src( $term_image_id, $args['size'], false );
	} elseif ( 'placeholder' === mb_strtolower( $args['fallback'] ) ) {
		$url = gtaxi_get_placeholder_img_src();
		$alt = esc_attr( $term->name ) . ' term image';
		$html = '<img src="' . $url . '" alt="' . $alt . '" class="wp-post-image" height="48" width="48" />';
	} else {
		return false;
	}

	// Source path, relative to the root
	$src = str_replace( home_url(), '', $url );
	
	// Determine output
	switch (  mb_strtolower( $args['format'] ) ) {
// @TODO: find a way to return the entire image attachment object/array if requested
//		case 'array':
//			$output = get_post($term_image_id);
//			break;
		case 'url':
			$output = $url;
			break;
		case 'html':
		default:
			$output = $html;
			break;

	}


	// I don't see the point of this. The only way $url could be false at this point is if gtaxi_get_placeholder_img_src()
	// returned false, which the user would actively have to do via a filter. So it's disabled for now to see if anyone notices
	//if ( empty( $url ) ) { $output = false; }

	/**
	 * Filter the retrieved and calculated values
	 *
	 * @since 0.8.0
	 *
	 * @param string $output The requested image in the requested 'format'. Note: if not filtering, this is what is returned
	 * @param string $args The arguments used
	 * @param string $term_image_id The ID of the image
	 * @param string $html The results for the HTML 'format' option
	 * @param string $url The full url to the image
	 * @param string $src The url relative to the root
	 */
	return apply_filters( 'gtaxi_get_taxonomy_image', $output, $args, $term_image_id, $html, $url, $src );
}